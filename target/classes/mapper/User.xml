<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，做sql隔离 -->
<mapper namespace="com.UserDao">
    <!-- 
    id：sql语句唯一标识
    parameterType：指定传入参数类型（pojo类中对应的类型，不是数据库中的类型）
    resultType：返回结果集类型
    #{}：占位符，如果传入的类型是基本类型（string，long，double，int，boolean，float等），那么#{}中变量名称可以任意
     -->
    <select id="findUserById" parameterType="java.lang.Integer" resultType="mybatis.User">
        SELECT * FROM user WHERE id=#{id}
    </select>
    
    <!-- 
    如果返回的结果为集合，resultType中也是配置为集合中泛型的类型，即resultType="mybatis.User"
    ${}：拼接符，如果传入的类型是基本类型（string，long，double，int，boolean，float等），那么${}中变量名称必须是value
     -->
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="mybatis.User">
        SELECT * FROM user WHERE username LIKE '%${value}%'
    </select>
    
    <!-- 
    如果传入的是pojo类型，则#{}中变量名称必须是pojo中对应的属性.属性.属性......
    如果要返回数据库自增主键，可以使用SELECT LAST_INSERT_ID()
     -->
    <insert id="insertUser" parameterType="mybatis.User">
        <!-- 执行SELECT LAST_INSERT_ID()数据库函数，返回自增的主键
            keyProperty：将返回的主键放入传入的参数的Id中保存（保存到user对象中的id属性）
            order：当前函数相对于insert语句的执行顺序，在insert前执行用BEFORE，在insert后执行用AFTER
            resultType：id的类型，也就是keyProperty中属性类型
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username,birthday,sex,address) VALUES (#{username},#{birthday},#{sex},#{address})
    </insert>
    
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        DELETE FROM user WHERE id=#{id}
    </delete>
    
    <update id="updateUserById" parameterType="mybatis.User">
        UPDATE user SET  username=#{username} WHERE id=#{id}
    </update>
</mapper>